{"/home/travis/build/npmtest/node-npmtest-what-input/test.js":"/* istanbul instrument in package npmtest_what_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-what-input/lib.npmtest_what_input.js":"/* istanbul instrument in package npmtest_what_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_what_input = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_what_input = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-what-input/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-what-input && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_what_input */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_what_input\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_what_input.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_what_input.rollup.js'] =\n            local.assetsDict['/assets.npmtest_what_input.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_what_input.__dirname + '/lib.npmtest_what_input.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-what-input/node_modules/what-input/dist/what-input.js":"/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v4.1.1\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t  /*\n\t   * variables\n\t   */\n\n\t  // cache document.documentElement\n\t  var docElem = document.documentElement;\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = null;\n\n\t  // form input types\n\t  var formInputs = ['input', 'select', 'textarea'];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [16, // shift\n\t  17, // control\n\t  18, // alt\n\t  91, // Windows key / left Apple cmd\n\t  93 // Windows menu / right Apple cmd\n\t  ];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    'keyup': 'keyboard',\n\t    'mousedown': 'mouse',\n\t    'mousemove': 'mouse',\n\t    'MSPointerDown': 'pointer',\n\t    'MSPointerMove': 'pointer',\n\t    'pointerdown': 'pointer',\n\t    'pointermove': 'pointer',\n\t    'touchstart': 'touch'\n\t  };\n\n\t  // array of all used input types\n\t  var inputTypes = [];\n\n\t  // boolean: true if touch buffer is active\n\t  var isBuffering = false;\n\n\t  // boolean: true if the page is being scrolled\n\t  var isScrolling = false;\n\n\t  // store current mouse position\n\t  var mousePos = {\n\t    'x': null,\n\t    'y': null\n\t  };\n\n\t  // map of IE 10 pointer events\n\t  var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\t  };\n\n\t  /*\n\t   * set up\n\t   */\n\n\t  var setUp = function setUp() {\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t    setInput();\n\t  };\n\n\t  /*\n\t   * events\n\t   */\n\n\t  var addListeners = function addListeners() {\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      docElem.addEventListener('pointerdown', updateInput);\n\t      docElem.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      docElem.addEventListener('MSPointerDown', updateInput);\n\t      docElem.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\t      // mouse events\n\t      docElem.addEventListener('mousedown', updateInput);\n\t      docElem.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        docElem.addEventListener('touchstart', touchBuffer);\n\t        docElem.addEventListener('touchend', touchBuffer);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    docElem.addEventListener(detectWheel(), setIntent);\n\n\t    // keyboard events\n\t    docElem.addEventListener('keydown', updateInput);\n\t    docElem.addEventListener('keyup', updateInput);\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var updateInput = function updateInput(event) {\n\t    // only execute if the touch buffer timer isn't running\n\t    if (!isBuffering) {\n\t      var eventKey = event.which;\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentInput !== value || currentIntent !== value) {\n\t        var activeElem = document.activeElement;\n\t        var activeInput = false;\n\n\t        if (activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1) {\n\t          activeInput = true;\n\t        }\n\n\t        if (value === 'touch' ||\n\n\t        // ignore mouse modifier keys\n\t        value === 'mouse' && ignoreMap.indexOf(eventKey) === -1 ||\n\n\t        // don't switch if the current element is a form input\n\t        value === 'keyboard' && activeInput) {\n\t          // set the current and catch-all variable\n\t          currentInput = currentIntent = value;\n\n\t          setInput();\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var setInput = function setInput() {\n\t    docElem.setAttribute('data-whatinput', currentInput);\n\t    docElem.setAttribute('data-whatintent', currentInput);\n\n\t    if (inputTypes.indexOf(currentInput) === -1) {\n\t      inputTypes.push(currentInput);\n\t      docElem.className += ' whatinput-types-' + currentInput;\n\t    }\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function setIntent(event) {\n\t    // test to see if `mousemove` happened relative to the screen\n\t    // to detect scrolling versus mousemove\n\t    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {\n\t      isScrolling = false;\n\n\t      mousePos['x'] = event.screenX;\n\t      mousePos['y'] = event.screenY;\n\t    } else {\n\t      isScrolling = true;\n\t    }\n\n\t    // only execute if the touch buffer timer isn't running\n\t    // or scrolling isn't happening\n\t    if (!isBuffering && !isScrolling) {\n\t      var value = inputMap[event.type];\n\t      if (value === 'pointer') value = pointerType(event);\n\n\t      if (currentIntent !== value) {\n\t        currentIntent = value;\n\n\t        docElem.setAttribute('data-whatintent', currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  // buffers touch events because they frequently also fire mouse events\n\t  var touchBuffer = function touchBuffer(event) {\n\t    if (event.type === 'touchstart') {\n\t      isBuffering = false;\n\n\t      // set the current input\n\t      updateInput(event);\n\t    } else {\n\t      isBuffering = true;\n\t    }\n\t  };\n\n\t  /*\n\t   * utilities\n\t   */\n\n\t  var pointerType = function pointerType(event) {\n\t    if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t    } else {\n\t      // treat pen like touch\n\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n\t    }\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n\t  var detectWheel = function detectWheel() {\n\t    var wheelType = void 0;\n\n\t    // Modern browsers support \"wheel\"\n\t    if ('onwheel' in document.createElement('div')) {\n\t      wheelType = 'wheel';\n\t    } else {\n\t      // Webkit and IE support at least \"mousewheel\"\n\t      // or assume that remaining browsers are older Firefox\n\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n\t    }\n\n\t    return wheelType;\n\t  };\n\n\t  /*\n\t   * init\n\t   */\n\n\t  // don't start script unless browser cuts the mustard\n\t  // (also passes if polyfills are used)\n\t  if ('addEventListener' in window && Array.prototype.indexOf) {\n\t    setUp();\n\t  }\n\n\t  /*\n\t   * api\n\t   */\n\n\t  return {\n\t    // returns string: the current input type\n\t    // opt: 'loose'|'strict'\n\t    // 'strict' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\n\t    ask: function ask(opt) {\n\t      return opt === 'loose' ? currentIntent : currentInput;\n\t    },\n\n\t    // returns array: all the detected input types\n\t    types: function types() {\n\t      return inputTypes;\n\t    }\n\t  };\n\t}();\n\n/***/ }\n/******/ ])\n});\n;","/home/travis/build/npmtest/node-npmtest-what-input/node_modules/what-input/Gulpfile.js":"const banner        = ['/**',\n  ' * <%= pkg.name %> - <%= pkg.description %>',\n  ' * @version v<%= pkg.version %>',\n  ' * @link <%= pkg.homepage %>',\n  ' * @license <%= pkg.license %>',\n  ' */',\n  ''].join('\\n')\nconst browserSync = require('browser-sync').create()\nconst concat      = require('gulp-concat')\nconst del         = require('del')\nconst gulp        = require('gulp')\nconst header      = require('gulp-header')\nconst notify      = require('gulp-notify')\nconst pkg         = require('./package.json')\nconst plumber     = require('gulp-plumber')\nconst rename      = require('gulp-rename')\nconst runSequence = require('run-sequence')\nconst standard    = require('gulp-standard')\nconst uglify      = require('gulp-uglify')\nconst webpack     = require('webpack-stream')\n\n/*\n * clean task\n */\n\ngulp.task('clean', () => {\n  return del(['**/.DS_Store'])\n})\n\n/*\n * scripts tasks\n */\n\ngulp.task('scripts:main', () => {\n  return gulp.src(['./src/what-input.js'])\n    .pipe(standard())\n    .pipe(standard.reporter('default', {\n      breakOnError: true,\n      quiet: false\n    }))\n    .pipe(webpack({\n      module: {\n        loaders: [{\n          test: /.jsx?$/,\n          loader: 'babel-loader',\n          exclude: /node_modules/,\n          query: {\n            presets: ['es2015']\n          }\n        }]\n      },\n      output: {\n        chunkFilename: '[name].js',\n        library: 'whatInput',\n        libraryTarget: 'umd',\n        umdNamedDefine: true\n      }\n    }))\n    .pipe(rename('what-input.js'))\n    .pipe(header(banner, { pkg : pkg } ))\n    .pipe(gulp.dest('./dist/'))\n    .pipe(gulp.dest('./docs/scripts/'))\n    .pipe(uglify())\n    .pipe(rename({\n      suffix: '.min'\n    }))\n    .pipe(header(banner, { pkg : pkg } ))\n    .pipe(gulp.dest('./dist/'))\n    .pipe(notify('Build complete'))\n})\n\ngulp.task('scripts:ie8', () => {\n  return gulp.src(['./src/polyfills/ie8/*.js'])\n    .pipe(plumber({\n      errorHandler: notify.onError(\"Error: <%= error.message %>\")\n    }))\n    .pipe(concat('lte-IE8.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('./dist/'))\n    .pipe(gulp.dest('./docs/scripts/'))\n    .pipe(notify('IE8 scripts task complete'))\n})\n\ngulp.task('scripts', ['scripts:main', 'scripts:ie8'])\n\n/*\n * default task\n */\n\ngulp.task('default', () => {\n  runSequence(\n    'clean',\n    [\n      'scripts'\n    ],\n    () => {\n      browserSync.init({\n        server: {\n          baseDir: './docs/'\n        }\n      })\n\n      gulp.watch([\n        './src/what-input.js',\n        './polyfills/*.js'\n      ], ['scripts']).on('change', browserSync.reload)\n\n      gulp.watch([\n        './*.html',\n      ]).on('change', browserSync.reload)\n    }\n  )\n})\n","/home/travis/build/npmtest/node-npmtest-what-input/node_modules/what-input/src/what-input.js":"module.exports = (() => {\n  /*\n   * variables\n   */\n\n  // cache document.documentElement\n  const docElem = document.documentElement\n\n  // last used input type\n  let currentInput = 'initial'\n\n  // last used input intent\n  let currentIntent = null\n\n  // form input types\n  const formInputs = [\n    'input',\n    'select',\n    'textarea'\n  ]\n\n  // list of modifier keys commonly used with the mouse and\n  // can be safely ignored to prevent false keyboard detection\n  const ignoreMap = [\n    16, // shift\n    17, // control\n    18, // alt\n    91, // Windows key / left Apple cmd\n    93  // Windows menu / right Apple cmd\n  ]\n\n  // mapping of events to input types\n  const inputMap = {\n    'keyup': 'keyboard',\n    'mousedown': 'mouse',\n    'mousemove': 'mouse',\n    'MSPointerDown': 'pointer',\n    'MSPointerMove': 'pointer',\n    'pointerdown': 'pointer',\n    'pointermove': 'pointer',\n    'touchstart': 'touch'\n  }\n\n  // array of all used input types\n  let inputTypes = []\n\n  // boolean: true if touch buffer is active\n  let isBuffering = false\n\n  // boolean: true if the page is being scrolled\n  let isScrolling = false\n\n  // store current mouse position\n  let mousePos = {\n    'x': null,\n    'y': null\n  }\n\n  // map of IE 10 pointer events\n  const pointerMap = {\n    2: 'touch',\n    3: 'touch', // treat pen like touch\n    4: 'mouse'\n  }\n\n  /*\n   * set up\n   */\n\n  const setUp = () => {\n    // add correct mouse wheel event mapping to `inputMap`\n    inputMap[detectWheel()] = 'mouse'\n\n    addListeners()\n    setInput()\n  }\n\n  /*\n   * events\n   */\n\n  const addListeners = () => {\n    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n    // can only demonstrate potential, but not actual, interaction\n    // and are treated separately\n\n    // pointer events (mouse, pen, touch)\n    if (window.PointerEvent) {\n      docElem.addEventListener('pointerdown', updateInput)\n      docElem.addEventListener('pointermove', setIntent)\n    } else if (window.MSPointerEvent) {\n      docElem.addEventListener('MSPointerDown', updateInput)\n      docElem.addEventListener('MSPointerMove', setIntent)\n    } else {\n      // mouse events\n      docElem.addEventListener('mousedown', updateInput)\n      docElem.addEventListener('mousemove', setIntent)\n\n      // touch events\n      if ('ontouchstart' in window) {\n        docElem.addEventListener('touchstart', touchBuffer)\n        docElem.addEventListener('touchend', touchBuffer)\n      }\n    }\n\n    // mouse wheel\n    docElem.addEventListener(detectWheel(), setIntent)\n\n    // keyboard events\n    docElem.addEventListener('keydown', updateInput)\n    docElem.addEventListener('keyup', updateInput)\n  }\n\n  // checks conditions before updating new input\n  const updateInput = (event) => {\n    // only execute if the touch buffer timer isn't running\n    if (!isBuffering) {\n      let eventKey = event.which\n      let value = inputMap[event.type]\n      if (value === 'pointer') value = pointerType(event)\n\n      if (\n        currentInput !== value ||\n        currentIntent !== value\n      ) {\n        let activeElem = document.activeElement\n        let activeInput = false\n\n        if (\n          activeElem &&\n          activeElem.nodeName &&\n          formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1\n        ) {\n          activeInput = true\n        }\n\n        if (\n          value === 'touch' ||\n\n          // ignore mouse modifier keys\n          (value === 'mouse' && ignoreMap.indexOf(eventKey) === -1) ||\n\n          // don't switch if the current element is a form input\n          (value === 'keyboard' && activeInput)\n        ) {\n          // set the current and catch-all variable\n          currentInput = currentIntent = value\n\n          setInput()\n        }\n      }\n    }\n  }\n\n  // updates the doc and `inputTypes` array with new input\n  const setInput = () => {\n    docElem.setAttribute('data-whatinput', currentInput)\n    docElem.setAttribute('data-whatintent', currentInput)\n\n    if (inputTypes.indexOf(currentInput) === -1) {\n      inputTypes.push(currentInput)\n      docElem.className += ' whatinput-types-' + currentInput\n    }\n  }\n\n  // updates input intent for `mousemove` and `pointermove`\n  const setIntent = (event) => {\n    // test to see if `mousemove` happened relative to the screen\n    // to detect scrolling versus mousemove\n    if (\n      mousePos['x'] !== event.screenX ||\n      mousePos['y'] !== event.screenY\n    ) {\n      isScrolling = false\n\n      mousePos['x'] = event.screenX\n      mousePos['y'] = event.screenY\n    } else {\n      isScrolling = true\n    }\n\n    // only execute if the touch buffer timer isn't running\n    // or scrolling isn't happening\n    if (!isBuffering && !isScrolling) {\n      let value = inputMap[event.type]\n      if (value === 'pointer') value = pointerType(event)\n\n      if (currentIntent !== value) {\n        currentIntent = value\n\n        docElem.setAttribute('data-whatintent', currentIntent)\n      }\n    }\n  }\n\n  // buffers touch events because they frequently also fire mouse events\n  const touchBuffer = (event) => {\n    if (event.type === 'touchstart') {\n      isBuffering = false\n\n      // set the current input\n      updateInput(event)\n    } else {\n      isBuffering = true\n    }\n  }\n\n  /*\n   * utilities\n   */\n\n  const pointerType = (event) => {\n    if (typeof event.pointerType === 'number') {\n      return pointerMap[event.pointerType]\n    } else {\n      // treat pen like touch\n      return (event.pointerType === 'pen') ? 'touch' : event.pointerType\n    }\n  }\n\n  // detect version of mouse wheel event to use\n  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\n  const detectWheel = () => {\n    let wheelType\n\n    // Modern browsers support \"wheel\"\n    if ('onwheel' in document.createElement('div')) {\n      wheelType = 'wheel'\n    } else {\n      // Webkit and IE support at least \"mousewheel\"\n      // or assume that remaining browsers are older Firefox\n      wheelType = (document.onmousewheel !== undefined) ? 'mousewheel' : 'DOMMouseScroll'\n    }\n\n    return wheelType\n  }\n\n  /*\n   * init\n   */\n\n  // don't start script unless browser cuts the mustard\n  // (also passes if polyfills are used)\n  if (\n    'addEventListener' in window &&\n    Array.prototype.indexOf\n  ) {\n    setUp()\n  }\n\n  /*\n   * api\n   */\n\n  return {\n    // returns string: the current input type\n    // opt: 'loose'|'strict'\n    // 'strict' (default): returns the same value as the `data-whatinput` attribute\n    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\n    ask: (opt) => { return (opt === 'loose') ? currentIntent : currentInput },\n\n    // returns array: all the detected input types\n    types: () => { return inputTypes }\n  }\n})()\n","/home/travis/build/npmtest/node-npmtest-what-input/node_modules/what-input/src/polyfills/ie8/EventListener.js":"// EventListener | CC0 | github.com/jonathantneal/EventListener\n\nthis.Element && Element.prototype.attachEvent && !Element.prototype.addEventListener && (function () {\n\tfunction addToPrototype(name, method) {\n\t\tWindow.prototype[name] = HTMLDocument.prototype[name] = Element.prototype[name] = method;\n\t}\n\n\t// add\n\taddToPrototype(\"addEventListener\", function (type, listener) {\n\t\tvar\n\t\ttarget = this,\n\t\tlisteners = target.addEventListener.listeners = target.addEventListener.listeners || {},\n\t\ttypeListeners = listeners[type] = listeners[type] || [];\n\n\t\t// if no events exist, attach the listener\n\t\tif (!typeListeners.length) {\n\t\t\ttarget.attachEvent(\"on\" + type, typeListeners.event = function (event) {\n\t\t\t\tvar documentElement = target.document && target.document.documentElement || target.documentElement || { scrollLeft: 0, scrollTop: 0 };\n\n\t\t\t\t// polyfill w3c properties and methods\n\t\t\t\tevent.currentTarget = target;\n\t\t\t\tevent.pageX = event.clientX + documentElement.scrollLeft;\n\t\t\t\tevent.pageY = event.clientY + documentElement.scrollTop;\n\t\t\t\tevent.preventDefault = function () { event.returnValue = false };\n\t\t\t\tevent.relatedTarget = event.fromElement || null;\n\t\t\t\tevent.stopImmediatePropagation = function () { immediatePropagation = false; event.cancelBubble = true };\n\t\t\t\tevent.stopPropagation = function () { event.cancelBubble = true };\n\t\t\t\tevent.target = event.srcElement || target;\n\t\t\t\tevent.timeStamp = +new Date;\n\n\t\t\t\tvar plainEvt = {};\n\t\t\t\tfor (var i in event) {\n\t\t\t\t\tplainEvt[i] = event[i];\n\t\t\t\t}\n\n\t\t\t\t// create an cached list of the master events list (to protect this loop from breaking when an event is removed)\n\t\t\t\tfor (var i = 0, typeListenersCache = [].concat(typeListeners), typeListenerCache, immediatePropagation = true; immediatePropagation && (typeListenerCache = typeListenersCache[i]); ++i) {\n\t\t\t\t\t// check to see if the cached event still exists in the master events list\n\t\t\t\t\tfor (var ii = 0, typeListener; typeListener = typeListeners[ii]; ++ii) {\n\t\t\t\t\t\tif (typeListener == typeListenerCache) {\n\t\t\t\t\t\t\ttypeListener.call(target, plainEvt);\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// add the event to the master event list\n\t\ttypeListeners.push(listener);\n\t});\n\n\t// remove\n\taddToPrototype(\"removeEventListener\", function (type, listener) {\n\t\tvar\n\t\ttarget = this,\n\t\tlisteners = target.addEventListener.listeners = target.addEventListener.listeners || {},\n\t\ttypeListeners = listeners[type] = listeners[type] || [];\n\n\t\t// remove the newest matching event from the master event list\n\t\tfor (var i = typeListeners.length - 1, typeListener; typeListener = typeListeners[i]; --i) {\n\t\t\tif (typeListener == listener) {\n\t\t\t\ttypeListeners.splice(i, 1);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// if no events exist, detach the listener\n\t\tif (!typeListeners.length && typeListeners.event) {\n\t\t\ttarget.detachEvent(\"on\" + type, typeListeners.event);\n\t\t}\n\t});\n\n\t// dispatch\n\taddToPrototype(\"dispatchEvent\", function (eventObject) {\n\t\tvar\n\t\ttarget = this,\n\t\ttype = eventObject.type,\n\t\tlisteners = target.addEventListener.listeners = target.addEventListener.listeners || {},\n\t\ttypeListeners = listeners[type] = listeners[type] || [];\n\n\t\ttry {\n\t\t\treturn target.fireEvent(\"on\" + type, eventObject);\n\t\t} catch (error) {\n\t\t\tif (typeListeners.event) {\n\t\t\t\ttypeListeners.event(eventObject);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t});\n\n\t// CustomEvent\n\tObject.defineProperty(Window.prototype, \"CustomEvent\", {\n\t\tget: function () {\n\t\t\tvar self = this;\n\n\t\t\treturn function CustomEvent(type, eventInitDict) {\n\t\t\t\tvar event = self.document.createEventObject(), key;\n\n\t\t\t\tevent.type = type;\n\t\t\t\tfor (key in eventInitDict) {\n\t\t\t\t\tif (key == 'cancelable'){\n\t\t\t\t\t\tevent.returnValue = !eventInitDict.cancelable;\n\t\t\t\t\t} else if (key == 'bubbles'){\n\t\t\t\t\t\tevent.cancelBubble = !eventInitDict.bubbles;\n\t\t\t\t\t} else if (key == 'detail'){\n\t\t\t\t\t\tevent.detail = eventInitDict.detail;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t};\n\t\t}\n\t});\n\n\t// ready\n\tfunction ready(event) {\n\t\tif (ready.interval && document.body) {\n\t\t\tready.interval = clearInterval(ready.interval);\n\n\t\t\tdocument.dispatchEvent(new CustomEvent(\"DOMContentLoaded\"));\n\t\t}\n\t}\n\n\tready.interval = setInterval(ready, 1);\n\n\twindow.addEventListener(\"load\", ready);\n})();\n\n(!this.CustomEvent || typeof this.CustomEvent === \"object\") && (function() {\n\t// CustomEvent for browsers which don't natively support the Constructor method\n\tthis.CustomEvent = function CustomEvent(type, eventInitDict) {\n\t\tvar event;\n\t\teventInitDict = eventInitDict || {bubbles: false, cancelable: false, detail: undefined};\n\n\t\ttry {\n\t\t\tevent = document.createEvent('CustomEvent');\n\t\t\tevent.initCustomEvent(type, eventInitDict.bubbles, eventInitDict.cancelable, eventInitDict.detail);\n\t\t} catch (error) {\n\t\t\t// for browsers which don't support CustomEvent at all, we use a regular event instead\n\t\t\tevent = document.createEvent('Event');\n\t\t\tevent.initEvent(type, eventInitDict.bubbles, eventInitDict.cancelable);\n\t\t\tevent.detail = eventInitDict.detail;\n\t\t}\n\n\t\treturn event;\n\t};\n})();\n","/home/travis/build/npmtest/node-npmtest-what-input/node_modules/what-input/src/polyfills/ie8/indexOf.js":"// Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n\n    var k;\n\n    // 1. Let O be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n      return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the\n      //    HasProperty internal method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      //    i.  Let elementK be the result of calling the Get\n      //        internal method of O with the argument ToString(k).\n      //   ii.  Let same be the result of applying the\n      //        Strict Equality Comparison Algorithm to\n      //        searchElement and elementK.\n      //  iii.  If same is true, return k.\n      if (k in O && O[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n"}